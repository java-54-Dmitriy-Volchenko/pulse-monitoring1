AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Microservice architecture with pulse monitoring and range provider.

Globals:
  Function:
    Runtime: java17
    Architectures:
      - x86_64
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        LOGGER_LEVEL: FINEST

Resources:
  # DynamoDB таблицы
  PulseValuesStream:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: pulse_values
      AttributeDefinitions:
        - AttributeName: patientId
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: patientId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  PulseAbnormalValuesStream:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: pulse_abnormal_values
      AttributeDefinitions:
        - AttributeName: patientId
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: patientId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  PulseJumpValuesStream:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: pulse_jumps_values
      AttributeDefinitions:
        - AttributeName: patientId
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: patientId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  PulseLastValues:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: last_pulse_values
      AttributeDefinitions:
        - AttributeName: patientId
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: patientId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda функция для анализа скачков пульса
  PulseJumpAnalyzer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: pulse-jump-analyzer
      Handler: telran.pulse.monitoring.App::handleRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PulseJumpValuesStream
        - DynamoDBCrudPolicy:
            TableName: !Ref PulseLastValues
      Events:
        TableRecordChange:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream: !GetAtt PulseValuesStream.StreamArn
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName": ["INSERT"]}'

  # Lambda функция для анализа значений пульса с использованием range-provider
  PulseValuesAnalyzer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: pulse-values-analyzer
      Handler: telran.pulse.monitoring.App::handleRequest
      Environment:
        Variables:
          RANGE_PROVIDER_URL: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/range"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PulseAbnormalValuesStream
        - DynamoDBCrudPolicy:
            TableName: !Ref PulseValuesStream
      Events:
        TableRecordChange:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream: !GetAtt PulseValuesStream.StreamArn
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName": ["INSERT"]}'

  # range-provider Lambda с API Gateway
  RangeProviderFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: range-provider
      Handler: helloworld.App::handleRequest
      MemorySize: 512
      Events:
        RangeProviderApi:
          Type: Api
          Properties:
            Path: /range
            Method: get

Outputs:
  PulseValuesStream:
    Description: "DynamoDB Stream for pulse values"
    Value: !GetAtt PulseValuesStream.StreamArn
  PulseAbnormalValuesStream:
    Description: "DynamoDB Stream for abnormal pulse values"
    Value: !GetAtt PulseAbnormalValuesStream.StreamArn
  RangeProviderApi:
    Description: "API Gateway URL for range provider function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/range"